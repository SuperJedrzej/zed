---
title: "Projekt Zed elektrownia"
output:
  html_document:
    df_print: paged
    toc: true
author: "Bartosz Markowski"
date: "`r format(Sys.time(), '%d %B, %Y')`"
---
## Podsumowanie {#section1}
W wczytanych danych był0o bardzowiele atrybutów nic nie wnoszących do analizy, zostały one odrzucone na podstawie korelacji, która praktycznie nie występowała. Dwa atrybuty irradiamento oraz irr_pvgis_mod były ze sobą mocno skorelowane, dlatego postanowiłem pozbyć się irr_pvgis_mod ,ponieważ on miał mniejszą korelacje. Na podsawie wykresu z korelacją i przyjrzeniu się wartości do analizyw zostały wybrane atrybuty: idsito, irradiamento, altitude, humidity, tempi, irri, dist, azimuthi. Podczas analizy danych zauważyłem, że atrybuty kwh i irradiamento posiadają dużo wartości 0, dlatego na podstawie sredniej w miesiącu z danej godziny zostały one zastąpione. Jednak niektórych nie dudało się zastąpić ponieważ były z godzin nocnych, dlatego postanowiłem usunąć te dane.

## Biblioteki {#section2}
```{r biblioteki, message = F, warning=FALSE}
library(dplyr)
library(corrplot)
library('caret')
library(gridExtra)
library(ggplot2)
library(plotly)
```
## Powtarzalnośc {#section3}
```{r powtarzalnosc}
set.seed(12)
```

## Wczytanie danych {#section4}
```{r wczytywanie}
data <- read.csv('elektrownie.csv')
data <- data %>% mutate(month= format(as.POSIXct(data, format='%m/%d/%Y %H:%M'), "%Y-%m"))
data <- data %>% mutate(hour= as.numeric(format(as.POSIXct(data, format='%m/%d/%Y %H:%M'), "%H")))
```

## Brakujące dane {#section5}
```{r brakujaceDane, warning=FALSE}
meanIrradiamento <- data %>% filter(irradiamento != 0) %>% group_by(month, hour) %>% summarise(mean = mean(irradiamento))
meanKwh <- data %>% filter(kwh != 0) %>% group_by(month, hour) %>% summarise(mean = mean(kwh))

data <- data %>% mutate(irradiamento = ifelse(irradiamento != 0,
                                      irradiamento,
                                      as.numeric(meanIrradiamento[meanIrradiamento$hour == hour & meanIrradiamento$month == month,]$mean)
                                              )) %>% filter(!is.na(irradiamento))
data <- data %>% mutate(kwh = ifelse(kwh != 0,
                                      kwh,
                                      as.numeric(meanKwh[meanKwh$hour == hour & meanKwh$month == month,]$mean)
                                              )) %>% filter(!is.na(kwh))

```
## Podstawowe statystyki {#section6}
```{r podstawoweStatystyki}
#liczba wierzy
len <- nrow(data)
print(len)
#liczba kolumn
clen <- ncol(data)
print(clen)
```



```{r}
iData <- data %>% select(irradiamento, altitude,humidity,tempi,irri,dist,azimuthi)
iData%>% summary()
```

## Rozkład wybranych atrybutów {#section7}
```{r rozklady, fig.width=10, fig.height=5}

array <- list()
for (col in colnames(iData)) 
array[[col]] <-((ggplot(iData) +
    aes_string(x=col) +
    geom_histogram(bins = 30))) 


do.call(grid.arrange,c(array, ncol = 4))

```


## Korelacja miedzy atrybutami {#section8}
```{r korelacja}
data %>% select(-data, -month, -hour) %>% cor() ->corr
corr %>% findCorrelation(cutoff = 0.2) -> result
corrplot(corr[result,result])
```

## Interaktywny wykres {#section9}
Chciałem tutaj dać wykres z podziałem na dni, jednak wykres stawal się wtedy bardzo nieczytelny bez przybliżenia, a dodatkowo wygenerowany wykres bardzo obciążał przeglądarkę, dlatego ograniczłem się do średniej z miesiąca na danym panelu.
```{r interaktywny}
plotData <- data %>% group_by(idsito, month) %>% summarise(kwh=sum(kwh))
plot <- ggplot(data = plotData, aes(month,kwh, color=factor(idsito))) + 
  geom_point() + 
  theme(axis.text.x = element_text(angle = 90))

ggplotly(plot)

```

## Tworzenie regesora {#section10}
```{r nauka}
lernData <- data %>% select(idsito, irradiamento, altitude,humidity,tempi,irri,dist,azimuthi, kwh)
train <- createDataPartition(y=lernData$idsito, p = 0.7, list = F)
trainData <- lernData[train,]
testData <- lernData[-train,]


model <- train(
    kwh ~ .,
    data = trainData,
    method = "lm",
    metric = "RMSE",
    trControl = trainControl(method="repeatedcv",number = 2, repeats = 6)
)
test <- predict(model, newdata = testData);
postResample(test, testData$kwh)

```
## Analiza regresora {#section11}
Największy wpływ na wytwarzaną energię ma nasłonecznienie, duży wpływ przejawia też zachmurzenie. Stworzony regesor uzyskał RMSE na poziomie 0.116.
```{r podsumowanie}
model %>% summary()
```
